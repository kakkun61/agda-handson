キーバインドを忘れる

refl が難しい

Agdaがどこまで計算を進めてくれるのか分からない !!

証明としての読み方とプログラムとしての読み方があるので難しい

ブールから自然数でギャップが大きい


n≤′m⇒n≤m などが名前として読めない（引数のnと混同する）

飛ばしてほしいところでも進めようとする

\equiv のように任意の型に対してのひとしさの定義というのはなかなかない？

> and b1 b2 = case b1 of
>     true -> ...
> こんな感じの方がプログラム書いてる感がましそうと思った(あくまで「感」)

> デフォルトの定義済みシンボル本当に少ないですね…

> C-c C-cとC-c C-a連打してると証明終わるの楽しい（ダメなパターン）
> 紙に書いて考えろの意味がわかった

implicit argument が可能なのは、依存型だから（他の言語に似たような機能はないのでは？）

rewrite はロードが必要（ストロークしてると何書いてたか忘れる）

ラムダ式が入るところでは C-c C-r でラムダ式でいれてくれるけど、場合分けとかはできない

そんなに自動でしてくれない、手動の部分が多い

semiring solver きもい

正しい証明になってるかどうかが不安（もっときれいに書けるのではないか？）

> この問題、Agda未経験のときは証明っぽい内容に見えたんだけど、実際に示せるようになると他の問題と大差ない感じですね。
> あんまり自明じゃないように見えたけど示せるようになると自明に近かったくらいの話かもしれないですね…

標準ライブラリになにがあるか把握するのが難しそう

週に1回だと前回なにをやったか忘れる、(キーバインドなど)かんを戻すのに時間がかかってしまう

symmetric が成り立たない可能性を考えてしまった（逆を一から証明してしまった）

序盤で飛ばしたところがやっぱり難しい

reasoning combinator はよしなにマッチしてくれない

if_then_else_ には違和感 手続き型っぽい
if_then_else_ は mixfix の例として

パイプでつなぐのは Haskell もある。... で省略できるのは議論

C-c C-l でゴールの一覧だしても計算が進んでいない（with のところができてない）

with で計算が進んだあとのゴールについて reasoning をする必要がある